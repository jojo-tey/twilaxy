[{"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\index.js":"1","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\App.js":"2","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Router.js":"3","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Auth.js":"4","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Home.js":"5","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\fBase.js":"6","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\fbase.js":"7","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Navigation.js":"8","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Profile.js":"9","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Tweet.js":"10","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\TweetFactory.js":"11","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\AuthForm.js":"12"},{"size":229,"mtime":1610022329676,"results":"13","hashOfConfig":"14"},{"size":1479,"mtime":1610061391749,"results":"15","hashOfConfig":"14"},{"size":1219,"mtime":1610036664377,"results":"16","hashOfConfig":"14"},{"size":1181,"mtime":1610033837985,"results":"17","hashOfConfig":"14"},{"size":893,"mtime":1610036009750,"results":"18","hashOfConfig":"14"},{"size":454,"mtime":1609862098272,"results":"19","hashOfConfig":"20"},{"size":738,"mtime":1609967315158,"results":"21","hashOfConfig":"14"},{"size":1147,"mtime":1610020742031,"results":"22","hashOfConfig":"14"},{"size":1587,"mtime":1610022299511,"results":"23","hashOfConfig":"14"},{"size":2306,"mtime":1610031955373,"results":"24","hashOfConfig":"14"},{"size":2787,"mtime":1610037086156,"results":"25","hashOfConfig":"14"},{"size":1798,"mtime":1610376266608,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1v0rn2d",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"ozd9h4",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"29"},"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\index.js",[],["58","59"],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\App.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Router.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Auth.js",["60"],"import { authService, firebaseInstance } from 'fbase';\r\nimport React from \"react\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {faTwitter, faGoogle, faGithub} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n\r\nconst onSocialClick = async (event) => {\r\n  const {target:{name}} = event;\r\n  let provider;\r\n  if(name === \"google\") {\r\n    provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n  } else if (name === \"github\") {\r\n    provider = new firebaseInstance.auth.GithubAuthProvider();\r\n  }\r\n  const data = await authService.signInWithPopup(provider);\r\n}\r\n\r\n  return (\r\n<div className=\"authContainer\">\r\n  <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"3x\" style={{marginBottom: 50}} />\r\n  <AuthForm />\r\n    <div className=\"authBtns\">\r\n      <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\r\n      <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\r\n      </div>\r\n\r\n</div>\r\n);\r\n};\r\n\r\nexport default Auth;\r\n","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Home.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\fBase.js",["61","62"],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\fbase.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Navigation.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Profile.js",["63"],"import { authService } from 'fbase';\r\nimport React, { useState }  from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\r\n  // Redirect to home after logout\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  // // getting userObj detail from Router.js\r\n  // const getMyTweets = async() => {\r\n  //   // to filtering quary\r\n  //   const tweets = await dbService.collection(\"tweets\").where(\"creatorId\", \"==\", userObj.uid).orderBy(\"createdAt\", \"desc\").get();\r\n  //   console.log(tweets.docs.map((doc) => doc.data()));\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   getMyTweets();\r\n  // })\r\n\r\nreturn (\r\n\r\n<div className=\"container\">\r\n<form onSubmit={onSubmit} className=\"profileForm\">\r\n  <input onChange={onChange} type=\"text\" palceholder=\"Display name\" value={newDisplayName} autoFocus className=\"formInput\"/>\r\n  <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{ marginTop:10}}/>\r\n</form>\r\n<span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>Log Out</span>\r\n</div>\r\n\r\n);\r\n};\r\n","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Tweet.js",["64"],"import { dbService, storageService } from 'fbase';\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => { \r\n  // boolean : if its editing mode or not\r\n  const [editing, setEditing] = useState(false);\r\n  // edit : for modify input value\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n  // delete\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\r\n    if(ok) {\r\n    // to delete tweet, get doc ID value from Obj\r\n    await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n    // to delete img, get URL from Obj\r\n    await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // update tweet - set same doc ID value as before & set new value\r\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n      text:newTweet\r\n    })\r\n    setEditing(false);\r\n  }\r\n  const onChange = (event) => {\r\n    const {target:{value}} = event;\r\n    setNewTweet(value);\r\n  }\r\n  \r\n  return (\r\n\r\n  <div className=\"tweet\">\r\n    {editing ? (\r\n      <>\r\n      {/* form for editing mode */}\r\n    <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n      <input onChange={onChange} type=\"text\" placeholder=\"Edit your Tweet\" value={newTweet} required autoFocus className=\"formInput\" />\r\n      <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\"/>\r\n      </form>\r\n      <span onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</span>\r\n      </>\r\n      \r\n    ) : (\r\n      <>\r\n      <h4>{tweetObj.text}</h4>\r\n      {/* run only when attachmentUrl exist */}\r\n      {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl} />}\r\n    {/* check isOwner by creator ID from Obj */}\r\n    {isOwner && (\r\n      \r\n      <div className=\"tweet_actions\">\r\n      <span onClick={onDeleteClick}><FontAwesomeIcon icon={faTrash} /></span>\r\n      <span onClick={toggleEditing}><FontAwesomeIcon icon={faPencilAlt} /></span>\r\n      </div>\r\n      \r\n    )}\r\n    </>\r\n    )}\r\n  </div>\r\n  \r\n);\r\n}\r\nexport default Tweet;",["65","66"],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\TweetFactory.js",["67"],"import React, { useState } from \"react\";\r\nimport { storageService, dbService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory = ({userObj}) => {\r\n  const [tweet, setTweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const onSubmit = async (event) => {\r\n    if (tweet === \"\") {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    // if photo uploaded\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    // if no photo uploaded\r\n    const tweetObj = {\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl\r\n    }\r\n    await dbService.collection(\"tweets\").add(tweetObj);\r\n    setTweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n  const onClearAttachment = () => {setAttachment(\"\")};\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput_container\">\r\n        <input\r\n          className=\"factoryInput_input\"\r\n          value={tweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput_arrow\"  />\r\n        </div>\r\n        <label for=\"attach-file\" className=\"factoryInput_label\">\r\n          <span>Add photos</span>\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </label>\r\n        <input id=\"attach-file\" type=\"file\" accept=\"image/*\" onChange={onFileChange} style={{opacity: 0}}  />\r\n        {attachment && (\r\n          <div className=\"factoryForm_attachment\">\r\n            <img src={attachment} \r\n            style={{backgroundImage: attachment}} />\r\n            <div className=\"factoryForm_clear\" onClick={onClearAttachment}>\r\n              <span>Remove</span>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </form>\r\n  )\r\n};\r\n\r\nexport default TweetFactory;","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\AuthForm.js",["68"],"import React, { useState } from \"react\";\r\nimport {authService} from \"fbase\";\r\n\r\nconst AuthForm = () => {\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(\"true\");\r\n  const [error, setError] = useState(\"\");\r\n  \r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n    if(newAccount) {\r\n      // create account\r\n      data = await authService.createUserWithEmailAndPassword(email, password);\r\n\r\n    } else {\r\n      // log in\r\n      data = await authService.signInWithEmailAndPassword(email, password);\r\n    }\r\n    // console.log(data);\r\n  } catch(error) {\r\n    setError(error.message);\r\n  }\r\n  }\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: {name, value}\r\n    } = event;\r\n    if(name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n  };}\r\n\r\n  return (\r\n  <>\r\n  <form onSubmit={onSubmit} className=\"container\">\r\n    <input \r\n    name=\"email\" \r\n    type=\"email\" \r\n    placeholder=\"Email\" \r\n    required value={email} \r\n    onChange={onChange}\r\n    className=\"authInput\"\r\n    />\r\n    <input \r\n    name=\"password\" \r\n    type=\"password\" \r\n    placeholder=\"Password\" \r\n    required value={password} \r\n    onChange={onChange}\r\n    className=\"authInput\"\r\n    />\r\n    <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Sign in\"} className=\"authInput authSubmit\" />\r\n    \r\n    {/* show error msg */}\r\n\r\n    {error && <span className=\"authError\">{error}</span>}\r\n    </form>\r\n    <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ?  \"Sign in\" : \"Create Account\"}</span>\r\n    </>)\r\n}\r\nexport default AuthForm;",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":17,"column":9,"nodeType":"75","messageId":"76","endLine":17,"endColumn":13},{"ruleId":"73","severity":1,"message":"77","line":1,"column":13,"nodeType":"75","messageId":"76","endLine":1,"endColumn":21},{"ruleId":"78","severity":2,"message":"79","line":13,"column":16,"nodeType":"75","messageId":"80","endLine":13,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":5,"column":1,"nodeType":"83","endLine":53,"endColumn":3},{"ruleId":"84","severity":1,"message":"85","line":52,"column":34,"nodeType":"86","endLine":52,"endColumn":70},{"ruleId":"69","replacedBy":"87"},{"ruleId":"71","replacedBy":"88"},{"ruleId":"84","severity":1,"message":"85","line":75,"column":13,"nodeType":"86","endLine":76,"endColumn":53},{"ruleId":"73","severity":1,"message":"74","line":23,"column":7,"nodeType":"75","messageId":"76","endLine":23,"endColumn":11},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'firebase' is defined but never used.","no-undef","'fbase' is not defined.","undef","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["89"],["90"],"no-global-assign","no-unsafe-negation"]