[{"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\index.js":"1","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\App.js":"2","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Router.js":"3","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Auth.js":"4","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Home.js":"5","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\fBase.js":"6","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\fbase.js":"7","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Navigation.js":"8","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Profile.js":"9","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Tweet.js":"10","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\AuthForm.js":"11"},{"size":220,"mtime":1610379376587,"results":"12","hashOfConfig":"13"},{"size":1314,"mtime":1610379376532,"results":"14","hashOfConfig":"13"},{"size":960,"mtime":1610379376545,"results":"15","hashOfConfig":"13"},{"size":2190,"mtime":1610379376600,"results":"16","hashOfConfig":"13"},{"size":2628,"mtime":1610379376606,"results":"17","hashOfConfig":"13"},{"size":454,"mtime":1609862098272,"results":"18","hashOfConfig":"13"},{"size":738,"mtime":1609967315158,"results":"19","hashOfConfig":"13"},{"size":278,"mtime":1610379376539,"results":"20","hashOfConfig":"13"},{"size":1421,"mtime":1610379376614,"results":"21","hashOfConfig":"13"},{"size":1966,"mtime":1610379376575,"results":"22","hashOfConfig":"13"},{"size":1798,"mtime":1610376266608,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ozd9h4",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\index.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\App.js",[],["50","51"],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Router.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Auth.js",["52"],"import { authService, firebaseInstance } from 'fbase';\r\nimport React from \"react\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {faTwitter, faGoogle, faGithub} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n\r\nconst onSocialClick = async (event) => {\r\n  const {target:{name}} = event;\r\n  let provider;\r\n  if(name === \"google\") {\r\n    provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n  } else if (name === \"github\") {\r\n    provider = new firebaseInstance.auth.GithubAuthProvider();\r\n  }\r\n  const data = await authService.signInWithPopup(provider);\r\n}\r\n\r\n  return (\r\n<div className=\"authContainer\">\r\n  <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"3x\" style={{marginBottom: 50}} />\r\n  <AuthForm />\r\n    <div className=\"authBtns\">\r\n      <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\r\n      <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\r\n      </div>\r\n\r\n</div>\r\n);\r\n};\r\n\r\nexport default Auth;\r\n","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Home.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\fBase.js",["53","54"],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\fbase.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Navigation.js",[],"E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\routes\\Profile.js",["55"],"import { authService } from 'fbase';\r\nimport React, { useState }  from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\r\n  // Redirect to home after logout\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  // // getting userObj detail from Router.js\r\n  // const getMyTweets = async() => {\r\n  //   // to filtering quary\r\n  //   const tweets = await dbService.collection(\"tweets\").where(\"creatorId\", \"==\", userObj.uid).orderBy(\"createdAt\", \"desc\").get();\r\n  //   console.log(tweets.docs.map((doc) => doc.data()));\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   getMyTweets();\r\n  // })\r\n\r\nreturn (\r\n\r\n<div className=\"container\">\r\n<form onSubmit={onSubmit} className=\"profileForm\">\r\n  <input onChange={onChange} type=\"text\" palceholder=\"Display name\" value={newDisplayName} autoFocus className=\"formInput\"/>\r\n  <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{ marginTop:10}}/>\r\n</form>\r\n<span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>Log Out</span>\r\n</div>\r\n\r\n);\r\n};\r\n","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\Tweet.js",["56"],"import { dbService, storageService } from 'fbase';\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => { \r\n  // boolean : if its editing mode or not\r\n  const [editing, setEditing] = useState(false);\r\n  // edit : for modify input value\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n  // delete\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\r\n    if(ok) {\r\n    // to delete tweet, get doc ID value from Obj\r\n    await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n    // to delete img, get URL from Obj\r\n    await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // update tweet - set same doc ID value as before & set new value\r\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n      text:newTweet\r\n    })\r\n    setEditing(false);\r\n  }\r\n  const onChange = (event) => {\r\n    const {target:{value}} = event;\r\n    setNewTweet(value);\r\n  }\r\n  \r\n  return (\r\n\r\n  <div className=\"tweet\">\r\n    {editing ? (\r\n      <>\r\n      {/* form for editing mode */}\r\n    <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n      <input onChange={onChange} type=\"text\" placeholder=\"Edit your Tweet\" value={newTweet} required autoFocus className=\"formInput\" />\r\n      <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\"/>\r\n      </form>\r\n      <span onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</span>\r\n      </>\r\n      \r\n    ) : (\r\n      <>\r\n      <h4>{tweetObj.text}</h4>\r\n      {/* run only when attachmentUrl exist */}\r\n      {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl} />}\r\n    {/* check isOwner by creator ID from Obj */}\r\n    {isOwner && (\r\n      \r\n      <div className=\"tweet_actions\">\r\n      <span onClick={onDeleteClick}><FontAwesomeIcon icon={faTrash} /></span>\r\n      <span onClick={toggleEditing}><FontAwesomeIcon icon={faPencilAlt} /></span>\r\n      </div>\r\n      \r\n    )}\r\n    </>\r\n    )}\r\n  </div>\r\n  \r\n);\r\n}\r\nexport default Tweet;","E:\\WORKSPACE\\twilaxy\\twilaxy\\src\\components\\AuthForm.js",["57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":17,"column":9,"nodeType":"64","messageId":"65","endLine":17,"endColumn":13},{"ruleId":"62","severity":1,"message":"66","line":1,"column":13,"nodeType":"64","messageId":"65","endLine":1,"endColumn":21},{"ruleId":"67","severity":2,"message":"68","line":13,"column":16,"nodeType":"64","messageId":"69","endLine":13,"endColumn":21},{"ruleId":"70","severity":1,"message":"71","line":5,"column":1,"nodeType":"72","endLine":53,"endColumn":3},{"ruleId":"73","severity":1,"message":"74","line":52,"column":34,"nodeType":"75","endLine":52,"endColumn":70},{"ruleId":"62","severity":1,"message":"63","line":23,"column":7,"nodeType":"64","messageId":"65","endLine":23,"endColumn":11},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'firebase' is defined but never used.","no-undef","'fbase' is not defined.","undef","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]